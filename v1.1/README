v1.1  major changes:
* updated complex.h
* bug fixed wavelet2d.cpp (mw01_wavelet2d_a mw01_wavelet2d_b are openmp private) 
* simplified function arguments



---------------------------------------------------------------------------------------------
Programs to compute Discrete Fourier Transform and Morlet continuous wavelet transform. Tested on Debian x86_64 with clang++/icc/g++/nvc++ compilers.


5 header files, 6 test cpp files, 2 bash scripts:

* allocate.h:          allocate multidimensional aligned array of any data type. contiguous memory.
* complex.h:           complex numbers template class. avx/fma 256/512 multiplication for float and double.
* table.h:             required if using bit-reverse fft. generated by table.cpp 
* dft.h:               discrete Fourier transform. Cooley Tukey/Radix-2/Rader algorithms.         
* morlet.h:            continuous wavelet transform with Morlet. 

* table.cpp:           generate table.h, to bit-reverse the input array in fft
* testdft.cpp:         tests of dft.h
* testmorlet.cpp:      tests of morlet.h
* wavelet2d.cpp:       sample 2D wavelet transform. OpenMP
* wavelet2d_stat.cpp:  compute accuracy statistics of wavelet2d.cpp results, using equations in wavelet2D.pdf
* fft_bench.cpp:       for speed testing

* compile.sh:          script to compile the test programs     
* wavelet2d.sh:        script to run wavelet2d.cpp and wavelet2d_stat.cpp


Tips:
* You may want to read wavelet2D.pdf for the formulas to reconstruct and compute variance/covariance
* To use bit-reverse version of fft, change fft_bit_reverse to 1 in dft.h before compiling.
