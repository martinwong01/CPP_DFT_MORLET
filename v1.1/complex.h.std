#include <complex>
#include <iostream>
#include <cmath>
#if AVX > 0 || AVX512F > 0 || AVX512VL > 0 || FMA > 0
    #include <immintrin.h>
#endif
using namespace std;
using namespace std::complex_literals;

template <class Type>
constexpr std::complex<Type> realconj(const std::complex<Type>& z) {
    std::complex<Type> temp;
    temp.real = -real(z);
    temp.imag = imag(z);
    return temp;
}

template <class Type>
std::complex<Type> turnleft(const std::complex<Type>& z) {
    std::complex<Type> temp;
    temp.real = -imag(z);
    temp.imag = real(z);
    return temp;
}

template <class Type>
std::complex<Type> turnright(const std::complex<Type>& z) {
    std::complex<Type> temp;
    temp.real = imag(z);
    temp.imag = -real(z);
    return temp;
}

template <class Type>
std::complex<Type> swapcomplex(const std::complex<Type>& z) {
    std::complex<Type> temp;
    temp.real = imag(z);
    temp.imag = real(z);
    return temp;
}

template<class Type>
Type& real(std::complex<Type> &z) {
    return reinterpret_cast<Type*>(&z)[0];
}

template<class Type>
Type& imag(std::complex<Type> &z) {
    return reinterpret_cast<Type*>(&z)[1];
}


#if AVX512F > 0
// 512 bit double multiply
inline __m512d complex_mul_512register(__m512d mw01_mul512d_a,__m512d mw01_mul512d_b) {
    return _mm512_fmaddsub_pd(mw01_mul512d_a,_mm512_permute_pd(mw01_mul512d_b,0b00000000),_mm512_mul_pd(_mm512_permute_pd(mw01_mul512d_a,0b01010101),_mm512_permute_pd(mw01_mul512d_b,0b11111111)));
}

inline __m512d complex_mul_512register(double *a,double *b,int aligna,int alignb) {
    if(aligna == 0 && alignb == 0)	
        return complex_mul_512register(_mm512_load_pd(a),_mm512_load_pd(b));
    else if(aligna == 0 && alignb != 0)
        return complex_mul_512register(_mm512_load_pd(a),_mm512_loadu_pd(b));
    else if(aligna != 0 && alignb == 0)
        return complex_mul_512register(_mm512_loadu_pd(a),_mm512_load_pd(b));
    else
        return complex_mul_512register(_mm512_loadu_pd(a),_mm512_loadu_pd(b));
}

inline __m512d complex_mul_512register(double& a0r,double& a0i,double& a1r,double& a1i,double& a2r,double& a2i,double& a3r,double& a3i,double *b,int alignb) {
    if(alignb == 0)
        return complex_mul_512register(_mm512_setr_pd(a0r,a0i,a1r,a1i,a2r,a2i,a3r,a3i),_mm512_load_pd(b));	    
    else
        return complex_mul_512register(_mm512_setr_pd(a0r,a0i,a1r,a1i,a2r,a2i,a3r,a3i),_mm512_loadu_pd(b));
}

inline __m512d complex_mul_512register(double& a0r,double& a0i,double *b,int alignb) {
    if(alignb == 0)
        return complex_mul_512register(_mm512_setr_pd(a0r,a0i,a0r,a0i,a0r,a0i,a0r,a0i),_mm512_load_pd(b));
    else
        return complex_mul_512register(_mm512_setr_pd(a0r,a0i,a0r,a0i,a0r,a0i,a0r,a0i),_mm512_loadu_pd(b));
}




// 512 bit float multiply
inline __m512 complex_mul_512register(__m512 mw01_mul512f_a,__m512 mw01_mul512f_b) {
    return _mm512_fmaddsub_ps(mw01_mul512f_a,_mm512_permute_ps(mw01_mul512f_b,0b10100000),_mm512_mul_ps(_mm512_permute_ps(mw01_mul512f_a,0b10110001),_mm512_permute_ps(mw01_mul512f_b,0b11110101)));
}

inline __m512 complex_mul_512register(float *a,float *b,int aligna,int alignb) {
    if(aligna == 0 && alignb == 0)
        return complex_mul_512register(_mm512_load_ps(a),_mm512_load_ps(b));
    else if(aligna == 0 && alignb != 0)
        return complex_mul_512register(_mm512_load_ps(a),_mm512_loadu_ps(b));
    else if(aligna != 0 && alignb == 0)
        return complex_mul_512register(_mm512_loadu_ps(a),_mm512_load_ps(b));
    else
        return complex_mul_512register(_mm512_loadu_ps(a),_mm512_loadu_ps(b));
}

inline __m512 complex_mul_512register(float& a0r,float& a0i,float& a1r,float& a1i,float& a2r,float& a2i,float& a3r,float& a3i,float& a4r,float& a4i,float& a5r,float& a5i,float& a6r,float& a6i,float& a7r,float& a7i,float *b,int alignb) {
    if(alignb == 0)
        return complex_mul_512register(_mm512_setr_ps(a0r,a0i,a1r,a1i,a2r,a2i,a3r,a3i,a4r,a4i,a5r,a5i,a6r,a6i,a7r,a7i),_mm512_load_ps(b));
    else
        return complex_mul_512register(_mm512_setr_ps(a0r,a0i,a1r,a1i,a2r,a2i,a3r,a3i,a4r,a4i,a5r,a5i,a6r,a6i,a7r,a7i),_mm512_loadu_ps(b));
}

inline __m512 complex_mul_512register(float& a0r,float& a0i,float *b,int alignb) {
    if(alignb == 0)
        return complex_mul_512register(_mm512_setr_ps(a0r,a0i,a0r,a0i,a0r,a0i,a0r,a0i,a0r,a0i,a0r,a0i,a0r,a0i,a0r,a0i),_mm512_load_ps(b));
    else
        return complex_mul_512register(_mm512_setr_ps(a0r,a0i,a0r,a0i,a0r,a0i,a0r,a0i,a0r,a0i,a0r,a0i,a0r,a0i,a0r,a0i),_mm512_loadu_ps(b));
}
#endif




#if AVX > 0
// 256 bit double multiply
inline __m256d complex_mul_256register(__m256d mw01_mul256d_a,__m256d mw01_mul256d_b) {
    return _mm256_fmaddsub_pd(mw01_mul256d_a,_mm256_permute_pd(mw01_mul256d_b,0b0000),_mm256_mul_pd(_mm256_permute_pd(mw01_mul256d_a,0b0101),_mm256_permute_pd(mw01_mul256d_b,0b1111)));
}

inline __m256d complex_mul_256register(double& a0r,double& a0i,double& a1r,double& a1i,double *b,int alignb) {
    if(alignb == 0)
        return complex_mul_256register(_mm256_setr_pd(a0r,a0i,a1r,a1i),_mm256_load_pd(b));
    else
	return complex_mul_256register(_mm256_setr_pd(a0r,a0i,a1r,a1i),_mm256_loadu_pd(b));
}

inline __m256d complex_mul_256register(double& a0r,double& a0i,double *b,int alignb) {
    if(alignb == 0)
        return complex_mul_256register(_mm256_setr_pd(a0r,a0i,a0r,a0i),_mm256_load_pd(b));
    else
        return complex_mul_256register(_mm256_setr_pd(a0r,a0i,a0r,a0i),_mm256_loadu_pd(b));
}

inline __m256d complex_mul_256register(double *a,double *b,int aligna,int alignb) {
    if(aligna == 0 && alignb == 0)
        return complex_mul_256register(_mm256_load_pd(a),_mm256_load_pd(b));
    else if(aligna == 0 && alignb != 0)
        return complex_mul_256register(_mm256_load_pd(a),_mm256_loadu_pd(b));
    else if(aligna != 0 && alignb == 0)
        return complex_mul_256register(_mm256_loadu_pd(a),_mm256_load_pd(b));
    else
        return complex_mul_256register(_mm256_loadu_pd(a),_mm256_loadu_pd(b));
}




// 256 bit float multiply
inline __m256 complex_mul_256register(__m256 mw01_mul256f_a,__m256 mw01_mul256f_b) {
    return _mm256_fmaddsub_ps(mw01_mul256f_a,_mm256_permute_ps(mw01_mul256f_b,0b10100000),_mm256_mul_ps(_mm256_permute_ps(mw01_mul256f_a,0b10110001),_mm256_permute_ps(mw01_mul256f_b,0b11110101)));
}

inline __m256 complex_mul_256register(float *a,float *b,int aligna,int alignb) {
    if(aligna == 0 && alignb == 0)
        return complex_mul_256register(_mm256_load_ps(a),_mm256_load_ps(b));
    else if(aligna == 0 && alignb != 0)
        return complex_mul_256register(_mm256_load_ps(a),_mm256_loadu_ps(b));
    else if(aligna != 0 && alignb == 0)
        return complex_mul_256register(_mm256_loadu_ps(a),_mm256_load_ps(b));
    else
        return complex_mul_256register(_mm256_loadu_ps(a),_mm256_loadu_ps(b));
}

inline __m256 complex_mul_256register(float& a0r,float& a0i,float& a1r,float& a1i,float& a2r,float& a2i,float& a3r,float& a3i,float *b,int alignb) {
    if(alignb == 0)
        return complex_mul_256register(_mm256_setr_ps(a0r,a0i,a1r,a1i,a2r,a2i,a3r,a3i),_mm256_load_ps(b));
    else
        return complex_mul_256register(_mm256_setr_ps(a0r,a0i,a1r,a1i,a2r,a2i,a3r,a3i),_mm256_loadu_ps(b));
}

inline __m256 complex_mul_256register(float& a0r,float& a0i,float *b,int alignb) {
    if(alignb == 0)
        return complex_mul_256register(_mm256_setr_ps(a0r,a0i,a0r,a0i,a0r,a0i,a0r,a0i),_mm256_load_ps(b));
    else
        return complex_mul_256register(_mm256_setr_ps(a0r,a0i,a0r,a0i,a0r,a0i,a0r,a0i),_mm256_loadu_ps(b));
}
#endif


